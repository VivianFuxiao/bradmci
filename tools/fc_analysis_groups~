#!/bin/bash

# useful functions
source /cluster/animal/scripts/matlab/matlab_74

#
# For each subject, extracts time courses for each run
# and computes correlation coefficients using ROIs.
# Also generates a corresponding matrix graphic. 
#

function usage {
   echo ""
   echo "REQUIRED:"
   echo "                (you can use multiple subject args to compare groups)"
   echo "  -i  <arg>     Subject names, OR"
   echo "  -I  <file>    File containing subject names"
   echo ""
   echo "  -r  <arg>     ROI file locations, OR"
   echo "  -R  <file>    File containing ROI file locations"
   echo "  and..."
   echo "  -n  <arg>     ROI names, default ROI file name, OR"
   echo "  -N  <file>    File containing ROI names"
   echo ""
   echo "  -z  [network] Use network ROIs (instead of above). If no network is "
   echo "                    specified, ALL available networks are used. "
   echo "                    To see available networks: /cluster/animal/users/mhollen/scripts/fc_networks"
   echo "                    (multiple -z arguments can be used)"
   echo "  -Z            Instead of above, runs ALL available networks"
   echo "  -v  <radius>  Radius of network ROIs (in mm)"
   echo ""
   echo "  -l  <arg>     Analysis label, e.g. 'DMN' (no spaces). This will be the"
   echo "                      root-name if multiple subject groups are used."
   echo ""
   echo "Options:"
   echo "  -u  <file>    Filename of run list (as found in <SUBJECT>/<file>)"
   echo "  -w            When comparing groups, also look at within-network "
   echo "                 (ROI-ROI) differences."
   echo "  -k            Gaussian smoothing BOLD to process, default 6mm"
   echo "  -e            Force timecourse extraction"
   echo "  -x            Skip extraction"
   echo "  -s            Do not calculate subject averages"
   echo "  -t            Do not calculate group averages"
   echo "  -m            Make images of coefficent matrices"
   echo "  -p  <arg>     Only show coefficients where p < arg. (default is .05)."
   echo "                All other values are converted to 0.000 on matrix plots" 
   echo "  -o  <arg>     Output directory, default ./GROUP_STATS/<user>/FC"
   echo "  -b            Make bar graphs"
   echo "  -h            Help"
   echo ""
   echo "Note: when using multiple arguments, place in quotes:"
   echo "fc_analysis -i \"SUBJ1 SUBJ2 SUBJ3\" -r \"ROI1 ROI2\""
   echo ""   
}


# To not complicate the argument case statement, these functions
# serve to organize the subjects and their correspond grouping
subjectGroups=0;
function addSubjects {
    if [ "$1" != "" ]; then
    	# make sure they exist in the current directory
	for sub in $1; do 
	    if [ ! -d $(pwd)/$sub ]; then
	    	echo "Error. Cannot find subject '$sub'."; exit 1;
	    fi
	done
	# make new subject group, add subjects.
    	subjectGroups=$((subjectGroups+1))
	ALLSUBJECTS[$subjectGroups]=$1
	# make subject group name
	if [ "$2" != "" ]; then
    	    ALLSUBJECTSNAME[$subjectGroups]=$(basename $2)
	else 
    	    ALLSUBJECTSNAME[$subjectGroups]="GROUP$subjectGroups"
	fi
    fi

}


function addSubjectFile {
    if [ $1 == "" ]; then
    	echo "Error loading subject file."; exit 1;
    elif [ ! -r $1 ]; then
    	echo "Error: cannot find file $1"; exit 1;
    fi
    m=$(cat $1 | xargs);
    addSubjects "$m" $1
}

USENETWORKS=0;
ROISIZE=6
WITHINNETWORK=0
SKIPEXTRACT=0
BARGRAPHS=0

ROINAMES=""
RD="$PWD/GROUP_STATS/$(whoami)/FC";
PVAL="0.050";
SMOOTH=6;

while getopts "i:r:I:R:n:N:u:l:o:p:k:v:z: Z e h t s m w x b " o ; do
    case $o in
     i ) addSubjects "$OPTARG";;
	 I ) addSubjectFile $OPTARG;;
	 r ) ROIS=$OPTARG;;
	 R ) ROIS=$(cat $OPTARG | xargs);;
	 n ) ROINAMES=$OPTARG;;
	 N ) ROINAMES=$(cat $OPTARG | xargs);;
	 k ) SMOOTH=$OPTARG;;
	 e ) FORCEEXTRACT=1;;
	 p ) PVAL=$OPTARG;;
	 l ) ROOTNAME=$OPTARG;;
	 o ) RD=$OPTARG;;
	 t ) SKIPSUB=1;;
	 s ) SKIPGRP=1;;
	 m ) MAKEIMG=1;;
	 x ) SKIPEXTRACT=1;;
	 w ) WITHINNETWORK=1;;
	 u ) RUNLISTFILE=$OPTARG;;
	 Z ) USENETWORKS=1; NETWORKS="";;
	 z ) USENETWORKS=1; NETWORKS="$NETWORKS $OPTARG";;
     v ) ROISIZE=$OPTARG;;
	 b ) BARGRAPHS=1;;
	 h ) usage;
	     exit 0;;
    esac
done

if [ $# -eq 0 ]; then
   usage; exit 0;
fi

resultsdir=${RD}

if [ "${ALLSUBJECTS[1]}" == "" ]; then
    echo "Error: Please provide subjects.";
    usage; exit 0;
fi

if [ ! "$ROOTNAME" ]; then
    echo "Error: Please specify an analysis label, using -l.";
    exit 0;
fi

if [ $SMOOTH -eq 0 ]; then
    SMOOTH_HALF_F=0
else
    SMOOTH_HALF_F=$( echo 'scale=15;(.4412712/('$SMOOTH'/100))' | bc  | awk '{print int($1)}' );
fi

echo ""
for n in $(seq 1 $subjectGroups); do
    echo "**** SUBJECT GROUP $n (N=$(echo ${ALLSUBJECTS[$n]} | wc -w)) ****"
    echo "GROUP NAME: ${ALLSUBJECTSNAME[$n]}"
    echo "SUBJECTS: ${ALLSUBJECTS[$n]}"
    echo ""
done

echo "NETWORKS: $NETWORKS"


function getFieldNames {
    numROIs=$(echo $1 | wc -w);
    fieldNames=""
    if [ "$2" != "" ]; then
    	strDel="_$2_"
    else
    	strDel="_"
    fi
    for x in $(seq 2 $numROIs); do
	for y in $(seq 1 $((x-1))); do
    	    R1=$(echo $1 | awk -v N=$x '{print $N}')
	    R2=$(echo $1 | awk -v N=$y '{print $N}')
	    label="${R1}${strDel}${R2}"
	    label=${label//\-/\_}
	    fieldNames="${fieldNames}$label,"
	done
    done
    echo $fieldNames
}

function getFieldNamesNetwork {
    numROIs=$(echo $1 | wc -w);
    net=$2
    fn=""
    for x in $(seq 2 $numROIs); do
	for y in $(seq 1 $((x-1))); do
    	    R1=$(echo $1 | awk -v N=$x '{print $N}')
	    R2=$(echo $1 | awk -v N=$y '{print $N}')
	    R1=${R1//$net/}
	    R1=${R1//_/ }
	    R1=$(echo $R1 | xargs)
	    R2=${R2//$net/}
	    R2=${R2//_/ }
	    R2=$(echo $R2 | xargs)
	    label="'${R1} - ${R2}'"
	    fn="${fn}$label "
	done
    done
    echo $fn
}

function extract {
    echo "ROIS: $ROINAMES";
    echo ""
    echo "ROI FILES: "
    echo $ROIS;
    echo ""
    
    nsubs=$(echo $SUBJECTS | wc -w );

    n=1;
    comm="addpath('/cluster/animal/scripts/matlab/'); all=[]; "
    
    mkdir -p ${resultsdir}/${AL}/timecourses
    for subject in $SUBJECTS; do
            comm="${comm} subj=[];"
        fc=$( ls -d ${subject}/bold/0*/ | wc | awk '{print $1}' )
        if [ $fc == 0 ]; then
            echo -e "Error: No BOLD runs found for subject ${subject}."
            exit
        fi

            ppstr=$(/cluster/animal/users/mhollen/scripts/fc_ppstr $subject)
        RUNLISTtxt=${subject}/fcMRI/${subject}_${ppstr}_g${SMOOTH_HALF_F}_bpss_resid.txt

        if [ "$RUNLISTFILE" != "" ]; then
            if [ ! -r $subject/$RUNLISTFILE ]; then
                echo "*** No runlist file ( $RUNLISTFILE ) found for ${subject}! Skipping subject... ***"
                continue;
            else
                echo "using specific runlist file... $subject/$RUNLISTFILE"
                t=$(cat $subject/$RUNLISTFILE | xargs);
                echo "runs: $t"
                for x in $t; do
                    ga="$ga-e /bold/$x/ "
                done
                rlfiles=$(cat $RUNLISTtxt | grep -i $ga);
                
                if [ "$rlfiles" == "" ]; then
                    for x in $t; do
                        residfile="${subject}/bold/$x/${subject}_bld${x}_${ppstr}_g${SMOOTH_HALF_F}_bpss_resid"
                        if [ -e $residfile.nii.gz ]; then
                            rlfiles="${rlfiles}${residfile} "
                        else
                            echo "Error: can't find the file associated with the run '$x'"; exit 1;
                        fi
                    done
                fi
            
                echo $rlfiles > /tmp/${subject}.${RUNLISTFILE}.$$.txt
                RUNLIST=/tmp/${subject}.${RUNLISTFILE}.$$.txt
                
            fi
        else
            RUNLIST=$RUNLISTtxt
        fi
        
        format=""
        for x in $(cat $RUNLIST); do
            if [ ! -e $x".nii.gz" ]; then
            echo "Error: cannot find file $x.nii.gz"
            exit;
            else
            tp=$(fslnvols $x".nii.gz")
            format="${format}0x${tp}+"
            fi
        done


        comm="${comm} tc=[];"
        seednames=""
        for seed in $ROIS; do
            seedname=$(basename ${seed%%.nii*})
            seednames="$seednames '$seedname', "
            fileloc=${resultsdir}/${AL}/timecourses/${subject}_${seedname}
            if [ ! -r ${fileloc}.voxt.dat ] ||  [ $FORCEEXTRACT ]; then
                echo "Extracting timecourse for subject: $subject, ROI: $seedname"
                qnt_nifti -s -list $RUNLIST ${seed} | awk '$1 !~/#/ {print $2}' > ${fileloc}.voxt.dat
                if [ ! -r ${fileloc}.voxt.dat ]; then
                    echo "Error: Cannot find ${fileloc}.voxt.dat. Trying again...";
                    qnt_nifti -s -list $RUNLIST ${seed} | awk '$1 !~/#/ {print $2}' > ${fileloc}.voxt.dat
                fi
            else
                echo "Using previous timecourse file -- subject: $subject, ROI: $seedname"
            fi
            if [ ! -r ${fileloc}.voxt.dat ]; then
                echo "Error: Cannot find ${fileloc}.voxt.dat. Try forcing timecourse extraction using -e."; exit 1;
            fi

            if [ "$(cat ${fileloc}.voxt.dat | wc -w)" == "0" ]; then
                echo "Error: ${fileloc}.voxt.dat is empty. Forcing extraction..."; 
                echo "qnt_nifti -s -list $RUNLIST ${seed} | awk '$1 !~/#/ {print $2}' > ${fileloc}.voxt.dat"
                qnt_nifti -s -list $RUNLIST ${seed} | awk '$1 !~/#/ {print $2}' > ${fileloc}.voxt.dat
                if [ "$(cat ${fileloc}.voxt.dat | wc -w)" == "0" ]; then
                    echo "Error: ${fileloc}.voxt.dat is empty, AGAIN. What's wrong?"; exit 1;
                fi
            fi
            comm="${comm} tcf= load('${fileloc}.voxt.dat'); tc=[tc tcf];\n"
        done
        if [ $(echo ${ROINAMES} | wc -w) -eq $(echo ${ROIS} | wc -w) ]; then
            seednames="'${ROINAMES// /', '}'";
        else
            echo "Error: # of ROIS does not match # of ROI names..."; exit 1;
        fi
        # calculate coef
        comm="${comm} [fc, pval] = corrcoef(tc); fcz = real(r_2_fisher_z(fc)); \n"
            comm="${comm} all(:,:,${n}) = fcz; allr(:,:,${n}) = fc; \n"
        comm="${comm} all_flat(${n},:)=flatten_matrix(fcz); allr_flat(${n},:)=flatten_matrix(fc); \n"
        comm="${comm} pval_flat(${n},:)=flatten_matrix(pval); \n"

        n=$(($n+1))
    done
    
    # all subjects
    comm="${comm} csvwrite('${resultsdir}/${AL}/${ALgrp}.z.csv',all_flat); \n"
    comm="${comm} csvwrite('${resultsdir}/${AL}/${ALgrp}.r.csv',allr_flat); \n"
    comm="${comm} csvwrite('${resultsdir}/${AL}/${ALgrp}.p.csv',pval_flat); \n"
    comm="${comm} save('${resultsdir}/${AL}/${ALgrp}.mat','all','allr'); \n "
    
    # group results
    comm="${comm} grpz=mean(all_flat,1); grpzstderr=std(all_flat,0,1)/sqrt($nsubs); \n"
    comm="${comm} grpr=mean(allr_flat,1); grprstderr=std(allr_flat,0,1)/sqrt($nsubs); \n"
    comm="${comm} grpzmat=mean(all,3); grpzmatstderr=std(all,0,3)/sqrt($nsubs); \n"
    comm="${comm} grprmat=mean(allr,3); grprmatstderr=std(allr,0,3)/sqrt($nsubs); \n"
    comm="${comm} csvwrite('${resultsdir}/${AL}/${ALgrp}.z.group.csv',grpz); \n"
    comm="${comm} csvwrite('${resultsdir}/${AL}/${ALgrp}.r.group.csv',grpr); \n"
    comm="${comm} csvwrite('${resultsdir}/${AL}/${ALgrp}.z.group.stderr.csv',grpzstderr); \n"
    comm="${comm} csvwrite('${resultsdir}/${AL}/${ALgrp}.r.group.stderr.csv',grprstderr); \n"
    comm="${comm} save('${resultsdir}/${AL}/${ALgrp}.group.mat','grpzmat','grprmat','grpzmatstderr','grprmatstderr'); \n "
    
    # matrix image (these are old, let's make something a bit more fancy, eh?)
    if [ $MAKEIMG ]; then
        comm="${comm} allm = mean(all,3); cfig = fcmatrix(allm, {${seednames}}, '${AL} - ${ALgrp}');\n"
        fname="${resultsdir}/${AL}/${ALgrp}.png"
        comm="${comm} saveas(cfig, '${fname}', 'png');\n"
        comm="${comm} fprintf('writing: ${fname}\\\n');  \n"
    fi
    
     
    # make bar graphs of connectivity strength for single group
     if [ $BARGRAPHS -ne 0 ]; then
        
        strLabels=$(getFieldNamesNetwork "${ROINAMES}" '')
        strTitle="Functional Connectivity"
        
        # start plot
        comm="$comm f=figure('visible','off'); subplot(1,2,1); \n"
        comm="$comm nb=length(grpz); \n"
        comm="$comm if nb > 40; paperwidth=1700; else; paperwidth=300+35*nb; end \n"
        comm="$comm paperheight=600; \n"
        
        # can we fix the ratio?
        # figure will be 1000 pixels high, 1000+ pixels wide
        comm="$comm set(gcf, 'PaperPositionMode', 'auto'); \n"
        comm="$comm set(gcf,'un','pixels', 'position', [0 0 paperwidth paperheight]); \n"
        
        # group data 
        comm="$comm handle = barweb([mean(grpz(:)); 0]', [mean(grpzstderr(:)); 0]', [], [], 'Group Mean', [], 'functional connectivity strength', bone, [], [], [], []); \n"
        comm="$comm errorbar_tick(handle.errors(1),30); \n" 
        
        # mark if group is significant
        comm="$comm set(handle.ax,'un','pixels', 'position', [70 .3*paperheight 100 .6*paperheight]); \n"
        
        # plot individual connectivity values for each sample
        comm="$comm subplot(1,2,2); \n"
        comm="$comm handle = barweb([grpz; zeros(1,nb)]', [grpzstderr; zeros(1,nb)]', [], {$strLabels}, 'ROI-to-ROI Connectivity', [], '', bone, [], {''}, [], 'plot'); \n"
        comm="$comm set(handle.ax,'un','pixels', 'position', [220 .3*paperheight paperwidth-230 .6*paperheight]); \n"
        comm="$comm errorbar_tick(handle.errors(1),10*nb);"
        comm="$comm set(handle.ax,'ytick',-3:.2:3); \n"
        comm="$comm if nb > 2; set(handle.ax,'xtick',[]); end; \n"
        
        # make larger, set main title, move legend
        comm="$comm set(handle.legend,'un','pixels', 'position',[50 50 170 50]); \n"
        comm="$comm [axtitle htitle] = suplabel('$strTitle'  ,'t',[.05 .05 .9 .9]); set(htitle,'fontsize',28); \n "
        comm="$comm print(gcf,'-depsc2', '${resultsdir}/${AL}/${ALgrp}.bar.eps'); \n"
        comm="$comm print(gcf,'-dpng', '${resultsdir}/${AL}/${ALgrp}.bar.png'); \n"
        comm="$comm close; clear; \n"
    fi
    comm="$comm quit;\n"
    
    # run the matlab code
    echo -e $comm
    cmdfile="$(whoami)$$.m"
    echo -e $comm > $cmdfile
    run_matlab -nosplash -nodesktop -nojvm -r "${cmdfile%%.m}; exit"
    mkdir -p ${resultsdir}/${ROOTNAME}/scripts/
    cp $cmdfile ${resultsdir}/${ROOTNAME}/scripts/${ALgrp}.m
    rm $cmdfile
    
    
    # do we have results?
    if [ ! -e ${resultsdir}/${AL}/${ALgrp}.z.csv ]; then
        echo "Error: cannot find result file ${resultsdir}/${AL}/${ALgrp}.z.csv."; exit 1;
    fi
    
    # make ROI-ROI column names
    fieldNames=$(getFieldNames "$ROINAMES")
    
    # save ROI-ROI column names
    echo "SUBJECTS,"$fieldNames > /tmp/$$.hdr.csv;
    # save column-oriented subjects list
    echo $SUBJECTS | sed 's/ /\n/g' > /tmp/$$.subjects.txt
    
    # paste subjects list & results
    for ftype in z r p; do
        paste -d, /tmp/$$.subjects.txt ${resultsdir}/${AL}/${ALgrp}.$ftype.csv > /tmp/$$.$ftype.txt
    # save resulting csv file with proper headers (this better work!)
    cat /tmp/$$.hdr.csv /tmp/$$.$ftype.txt > ${resultsdir}/${AL}/${ALgrp}.$GROUP.$ftype.summary.csv
    done
}


function processSeeds {
    # are we using network hubs?
    if [ $USENETWORKS -eq 1 ]; then
        # if so, did they specify networks, or do we use them all?
        if [ "$NETWORKS" == "" ]; then
            NETWORKS=$(/cluster/animal/scripts/NRG-fc/tools/fc_networks -p);
        fi
        
        # loop through networks (check)
        for network in $NETWORKS; do 
            # check to see if network exists...
            if [[ ! $(/cluster/animal/scripts/NRG-fc/tools/fc_networks -n $network -e) -eq  1 ]]; then
                echo "Error: $network does not exist!"; 
                /cluster/animal/scripts/NRG-fc/tools/fc_networks -P;
                exit 1;
            fi	
        done
            
        netcount=0
        # loop through networks (process FC-analysis)
        for network in $NETWORKS; do
            
            netcount=$((netcount+1))
            roidir="${resultsdir}/${ROOTNAME}/rois/"
            ROIS="$(/cluster/animal/scripts/NRG-fc/tools/fc_networks -n $network -r $ROISIZE -o $roidir -l)"
            ROINAMES="$(/cluster/animal/scripts/NRG-fc/tools/fc_networks -n $network -r $ROISIZE -o $roidir -L)"
            ALLROIS[$netcount]=$ROIS
            ALLROINAMES[$netcount]=$ROINAMES
            ALgrp=$network
            # extract timecourses and compute fc
            [[ $SKIPEXTRACT -eq 0 ]] && extract
        done
    else
    	#
    	# TODO: custom ROI sets (can generalize this function)
        #
        if [[ $(echo $ROIS | wc -w) -lt 2 ]]; then
            echo "Error: Please provide at least 2 ROIs."
            exit 1;
        fi
        #ALgrp="${ALLSUBJECTSNAME[$nsubgrp]}"
        #NETWORKS="NONE"
        ALgrp="allrois"
        NETWORKS="allrois"
        ALLROIS[0]=$ROIS
        ALLROINAMES[1]="$ROINAMES"
        # extract timecourses and compute fc
        [[ $SKIPEXTRACT -eq 0 ]] && extract
    fi
}

# for each subject group, process seeds
for nsubgrp in $(seq 1 $subjectGroups); do
    SUBJECTS=${ALLSUBJECTS[$nsubgrp]}
    GROUP=${ALLSUBJECTSNAME[$nsubgrp]}
    AL="${ROOTNAME}/$GROUP"
    
    mkdir -p $resultsdir/$AL/

    echo "$SUBJECTS" > $resultsdir/$AL/subjects.lst
    
    # run!
    processSeeds
done


# HANDY... save the command to the project directory
# (if it made it down here... it must've ran)
echo "$0 $@" > ${resultsdir}/${ROOTNAME}/scripts/cmd.txt

# now that we've calculated the within-group details, 
# let's compare the groups using a t-test
if [[ $subjectGroups -gt 1 ]]; then
    comm="addpath('/cluster/animal/scripts/matlab/'); \n"
    net=1;
    for network in $NETWORKS; do
        # traverse all subject group-pairs
        fieldNames=$(getFieldNames "${ALLROINAMES[$net]}")
        strLabels=$(getFieldNamesNetwork "${ALLROINAMES[$net]}" "$network")
        
        echo "ALL-ROIS-P,"$fieldNames > /tmp/$$.$network.header
        for n in $(seq 2 $subjectGroups); do
            for p in $(seq 1 $((n-1))); do
                # make the contrast directory
                rdir="$resultsdir/$ROOTNAME/${ALLSUBJECTSNAME[$p]}_vs_${ALLSUBJECTSNAME[$n]}"
                mkdir -p $rdir
                # load group 1 & 2
                AL1="${ROOTNAME}/${ALLSUBJECTSNAME[$p]}"
                AL2="${ROOTNAME}/${ALLSUBJECTSNAME[$n]}"
                # z value means for all subjects in group n & p
                #if [ "$network" == "allrois" ]; then
                #    comm="$comm z1 = textread('${resultsdir}/${AL1}/${ALLSUBJECTSNAME[$p]}.z.csv','','delimiter',','); \n"
                #    comm="$comm z2 = textread('${resultsdir}/${AL2}/${ALLSUBJECTSNAME[$n]}.z.csv','','delimiter',','); \n"
                #else
                    comm="$comm z1 = textread('${resultsdir}/${AL1}/${network}.z.csv','','delimiter',','); \n"
                    comm="$comm z2 = textread('${resultsdir}/${AL2}/${network}.z.csv','','delimiter',','); \n"
                #fi
                comm="$comm zmean1 = mean(z1,2); \n"
                comm="$comm zmean2 = mean(z2,2); \n"
                # 2-sample t-test on group means
                comm="$comm [h pgrp ci] = ttest2(zmean1,zmean2,[],[],'unequal'); \n"
                # 2-sample t-test on ROI-ROI values
                comm="$comm [h p ci] = ttest2(z1,z2,[],[],'unequal'); \n"
                # save group and roi-roi t-test scores
                comm="$comm csvwrite('/tmp/$$.${ALLSUBJECTSNAME[$p]}_vs_${ALLSUBJECTSNAME[$n]}.$network.z.ttest.pval.csv', p); \n"
                comm="$comm save('/tmp/$$.${ALLSUBJECTSNAME[$p]}_vs_${ALLSUBJECTSNAME[$n]}.$network.z.group.ttest.pval.txt','pgrp','-ascii'); \n"

                 if [[ $BARGRAPHS -ne 0 ]]; then
                    #strLabels="$(echo $fieldNames2 | xargs | sed 's/,/ /g;' | xargs | sed "s/ /' '/g")"
                    
                    # it would be nice to remove the network name from the ROI-ROI label
                    # below are a bunch of hacks to get the labels the way i want them. UGH.
                    #strLabels=${strLabels//$network/}
                    #strLabels=${strLabels//$network/}
                    #strLabels=${strLabels//_/ }
                    #strLabels=$(echo $strLabels | xargs)
                    
                    strTitle="${ALLSUBJECTSNAME[$p]} vs ${ALLSUBJECTSNAME[$n]} - $network"
                    strTitle=${strTitle//_/ }
                    strGroups="{'${ALLSUBJECTSNAME[$p]}' '${ALLSUBJECTSNAME[$n]}'}"
                    
                    comm="$comm stderr1 = std(z1)/sqrt(size(z1,1)); stderr2 = std(z2)/sqrt(size(z2,1)); \n"
                    comm="$comm zgrp1 = mean(mean(z1,1),2); zgrp2 = mean(mean(z2,1),2); \n"
                    comm="$comm zstd1 = std(z1(:))/sqrt(length(z1(:))); zstd2= std(z2(:))/sqrt(length(z2(:))); \n"
                    comm="$comm zm1 = mean(z1,1); zm2 = mean(z2,1); \n "
                    
                    # start plot
                    comm="$comm f = figure('visible', 'off'); subplot(1,2,1); \n"
                    comm="$comm nb=length(zm1); \n"
                    comm="$comm if nb > 40; paperwidth=1700; else; paperwidth=300+35*nb; end \n"
                    comm="$comm paperheight=600; \n"
                    
                    # can we fix the ratio?
                    # figure will be 1000 pixels high, 1000+ pixels wide
                    comm="$comm set(gcf, 'PaperPositionMode', 'auto'); \n"
                    comm="$comm set(gcf,'un','pixels', 'position', [0 0 paperwidth paperheight]); \n"
                    
                    # group data 
                    comm="$comm handle = barweb([zgrp1 zgrp2]', [zstd1 zstd2]', [], [], 'Group Mean', ['p = ' num2str(pgrp)], 'functional connectivity strength', bone, [], [], [], []); \n"
                    comm="$comm errorbar_tick(handle.errors(1),30); \n" 
                    comm="$comm errorbar_tick(handle.errors(2),30); \n" 
                    
                    # mark if group is significant
                    comm="$comm if pgrp < .05 \n "
                    comm="$comm     qpos=1.05*(max([zgrp1+zstd1  zgrp2+zstd2])); \n"
                    comm="$comm     text(.95,qpos,'*','color','red','fontsize', 36,'Interpreter','None'); \n"
                    comm="$comm end \n"
                    comm="$comm set(handle.ax,'un','pixels', 'position', [70 .3*paperheight 100 .6*paperheight]); \n"
                    
                    # plot individual connectivity values for each sample
                    comm="$comm subplot(1,2,2); \n"
                    comm="$comm handle = barweb([zm1; zm2]', [stderr1; stderr2]', [], {$strLabels}, 'ROI-to-ROI Connectivity', [], '', bone, [], $strGroups, [], 'plot'); \n"
                    comm="$comm set(handle.ax,'un','pixels', 'position', [220 .3*paperheight paperwidth-230 .6*paperheight]); \n"
                    comm="$comm errorbar_tick(handle.errors(1),10*nb);"
                    comm="$comm errorbar_tick(handle.errors(2),10*nb);"
                    comm="$comm set(handle.ax,'ytick',-3:.2:3); \n"
                    comm="$comm if nb > 2; set(handle.ax,'xtick',[]); end; \n"
                    
                    # okay, we're going to make an attempt to mark significant value differences using an asterisk
                    comm="$comm sigs=find(p<.05); \n"
                    comm="$comm for i=1:length(sigs) \n"
                    comm="$comm    q=sigs(i); \n "
                    comm="$comm    qpos=1.05*(max([zm1(q)+stderr1(q)  zm2(q)+stderr2(q)])); \n"
                    comm="$comm    text(sigs(i)-.05,qpos,'*','color','red','fontsize', 22,'Interpreter','None'); \n"
                    comm="$comm	end \n "
                    
                    
                    # make larger, set main title, move legend
                    comm="$comm set(handle.legend,'un','pixels', 'position',[50 50 170 50]); \n"
                    comm="$comm [axtitle htitle] = suplabel('$strTitle'  ,'t',[.05 .05 .9 .9]); set(htitle,'fontsize',28); \n "
                    #comm="$comm saveas(gcf, '$rdir/${ALLSUBJECTSNAME[$p]}_vs_${ALLSUBJECTSNAME[$n]}.$network.png', 'png'); \n"
                    #comm="$comm export_fig $rdir/${ALLSUBJECTSNAME[$p]}_vs_${ALLSUBJECTSNAME[$n]}.$network; \n "
                    comm="$comm print(gcf,'-depsc2', '$rdir/${ALLSUBJECTSNAME[$p]}_vs_${ALLSUBJECTSNAME[$n]}.$network.eps'); \n"
                    comm="$comm print(gcf,'-dpng', '$rdir/${ALLSUBJECTSNAME[$p]}_vs_${ALLSUBJECTSNAME[$n]}.$network.png'); \n"
                    comm="$comm close; clear; \n"
                fi
            done
        done
        net=$((net+1));
    done
    
    # process the matlab code, yo.
    echo -e $comm
    cmdfile="$(whoami)$$.m"
    echo -e $comm > $cmdfile
    #DISPLAY=""
    run_matlab -nodesktop -nosplash -r "${cmdfile%%.m}; exit"
    mkdir -p ${resultsdir}/${ROOTNAME}/scripts/
    cp $cmdfile ${resultsdir}/${ROOTNAME}/scripts/ttests.m
    rm $cmdfile
    
    # i hate bash. i love bash. i hate-love bash.
    for n in $(seq 2 $subjectGroups); do
    	for p in $(seq 1 $((n-1))); do
            rdir="$resultsdir/$ROOTNAME/${ALLSUBJECTSNAME[$p]}_vs_${ALLSUBJECTSNAME[$n]}"
            htmlReport="${rdir}.html"
            n1=$(echo ${ALLSUBJECTS[$p]} | wc -w);
            n2=$(echo ${ALLSUBJECTS[$n]} | wc -w);
            echo "<html><head><title>${ALLSUBJECTSNAME[$p]} vs ${ALLSUBJECTSNAME[$n]}</title><head><body font=\"helvetica,arial,sans-serif\">" > $htmlReport
            echo "<h2>${ALLSUBJECTSNAME[$p]} (N=$n1) vs ${ALLSUBJECTSNAME[$n]} (N=$n2)</h2>" >> $htmlReport
            echo "All results located in NMR directory:<br>$rdir<br><hr>" >> $htmlReport
            for network in $NETWORKS; do
                fbase="/tmp/$$.${ALLSUBJECTSNAME[$p]}_vs_${ALLSUBJECTSNAME[$n]}.$network"
                sumfile="$rdir/${ALLSUBJECTSNAME[$p]}_vs_${ALLSUBJECTSNAME[$n]}.$network.z.pval.csv"
                cat /tmp/$$.$network.header > $sumfile
                echo "$(cat $fbase.z.group.ttest.pval.txt | xargs),$(cat $fbase.z.ttest.pval.csv | xargs)" >> $sumfile
                
                # make html report
                imgdir="${ALLSUBJECTSNAME[$p]}_vs_${ALLSUBJECTSNAME[$n]}"
                imgloc="${imgdir}/${imgdir}.$network.png"
                echo "<h3>${network//_/ }</h3>" >> $htmlReport
                echo "<i>p-values: <a href=$imgdir/${imgdir}.$network.z.pval.csv>$network (csv)</a></i><br><br>" >> $htmlReport
                echo "<a href=$imgloc><img src=$imgloc height=525 border=0 /></a><br><br>" >> $htmlReport
            done
            echo "</body></html>" >> $htmlReport
        done
    done
fi

echo "RESULTS: "
echo "${resultsdir}/$ROOTNAME/"
echo ""

# cleanup, dawg.
rm -f /tmp/$$.*





